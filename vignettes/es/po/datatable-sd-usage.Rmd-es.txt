Esta viñeta explica las formas más comunes de usar la variable `.SD` en los análisis de `data.table`. Es una adaptación de [esta respuesta]{1} proporcionada en StackOverflow.
¿Qué es «.SD»?
En el sentido más amplio, `.SD` es simplemente una abreviatura para capturar una variable que aparece con frecuencia en el contexto del análisis de datos. Puede entenderse como *S*ubset, *S*elfsame, o *S*elf-reference of the *D*ata. Es decir, `.SD` es en su forma más básica una _referencia reflexiva_ a la `data.table` en sí misma -- como veremos en los ejemplos a continuación, esto es particularmente útil para encadenar \"consultas\" (extracciones/subconjuntos/etc. usando `[`). En particular, esto también significa que `.SD` es _en sí mismo una `data.table`_ (con la salvedad de que no permite la asignación con `:=`).
El uso más simple de `.SD` es para la creación de subconjuntos de columnas (es decir, cuando se especifica `.SDcols`); como esta versión es mucho más sencilla de entender, la abordaremos primero a continuación. La interpretación de `.SD` en su segundo uso, los escenarios de agrupación (es decir, cuando se especifica `by = ` o `keyby = `), es ligeramente diferente, conceptualmente (aunque en esencia es la misma, ya que, después de todo, una operación no agrupada es un caso extremo de agrupación con un solo grupo).
Carga y vista previa de datos de Lahman
Para que esto parezca más real, en lugar de inventar datos, carguemos algunos conjuntos de datos sobre béisbol desde la [base de datos Lahman]{1}. En el uso típico de R, simplemente cargaríamos estos conjuntos de datos desde el paquete R `Lahman`; en este ejemplo, los hemos descargado previamente directamente desde la página de GitHub del paquete.
Los lectores familiarizados con la jerga del béisbol encontrarán familiar el contenido de las tablas: "Equipos" registra algunas estadísticas de un equipo determinado en un año determinado, mientras que "Lanzamientos" registra las estadísticas de un lanzador determinado en un año determinado. Consulte la [documentación]{1} y explore los datos un poco antes de familiarizarse con su estructura.
`.SD` en datos no agrupados
Para ilustrar lo que quiero decir sobre la naturaleza reflexiva de «.SD», consideremos su uso más banal:
Es decir, `Pitching[ , .SD]` simplemente ha devuelto la tabla completa, es decir, esta era una forma demasiado verbosa de escribir `Pitching` o `Pitching[]`:
En términos de subconjuntos, `.SD` sigue siendo un subconjunto de los datos, sólo que es trivial (el conjunto en sí).
Subconjunto de columna: `.SDcols`
La primera forma de influir en lo que es `.SD` es limitar las _columnas_ contenidas en `.SD` usando el argumento `.SDcols` a `[`:
Esto es solo para ilustrar y fue bastante aburrido. Además de aceptar un vector de caracteres, `.SDcols` también acepta:
=====1. cualquier función como `is.character` para filtrar _columnas_===== =====2. la función^{*} `patterns()` para filtrar _nombres de columnas_ mediante expresiones regulares===== =====3. vectores enteros y lógicos=====
*ver `?patrones` para más detalles
Este uso simple se presta a una amplia variedad de operaciones de manipulación de datos altamente beneficiosas y omnipresentes:
Conversión de tipo de columna
La conversión de tipos de columnas es una realidad en la manipulación de datos. Aunque [`fwrite` recientemente obtuvo la capacidad de declarar la clase de cada columna por adelantado]{1}, no todos los conjuntos de datos provienen de `fread` (por ejemplo, en esta viñeta) y las conversiones entre tipos `character`/`factor`/`numeric` son comunes. Podemos usar `.SD` y `.SDcols` para convertir por lotes grupos de columnas a un tipo común.
Observamos que las siguientes columnas se almacenan como "carácter" en el conjunto de datos "Equipos", pero sería más lógico almacenarlas como "factor":
La sintaxis para convertir ahora estas columnas a "factor" es sencilla:
Nota:
=====1. `:=` es un operador de asignación para actualizar la `data.table` en su lugar sin hacer una copia. Consulte [semántica de referencia]{1} para obtener más información. ===== =====2. El LHS, `names(.SD)`, indica qué columnas estamos actualizando; en este caso, actualizamos todo el `.SD`.===== =====3. El RHS, `lapply()`, recorre cada columna del `.SD` y convierte la columna en un factor.===== =====4. Usamos `.SDcols` para seleccionar solo columnas que tengan el patrón `teamID`.=====
Nuevamente, el argumento `.SDcols` es bastante flexible; anteriormente, proporcionamos `patrones` pero también podríamos haber proporcionado `fkt` o cualquier vector `carácter` de nombres de columnas. En otras situaciones, es más conveniente proporcionar un vector `entero` de posiciones de columnas o un vector `lógico` que indique la inclusión/exclusión de cada columna. Finalmente, el uso de una función para filtrar columnas es muy útil.
Por ejemplo, podríamos hacer lo siguiente para convertir todas las columnas de tipo «factor» a «carácter»:
Por último, podemos hacer una coincidencia basada en patrones de columnas en `.SDcols` para seleccionar todas las columnas que contienen `team` hasta `factor`:
** Una salvedad a lo anterior: usar números de columna _explícitamente_ (como `DT[ , (1) := rnorm(.N)]`) es una mala práctica y puede provocar que el código se corrompa de forma silenciosa con el tiempo si cambian las posiciones de las columnas. Incluso el uso implícito de números puede ser peligroso si no mantenemos un control inteligente/estricto sobre el orden en que creamos el índice numerado y cuándo lo usamos.
Controlar el lado derecho de un modelo
La variación de la especificación del modelo es una característica fundamental del análisis estadístico sólido. Intentemos predecir la efectividad (promedio de carreras limpias, una medida del rendimiento) de un lanzador utilizando el pequeño conjunto de covariables disponibles en la tabla "Lanzamiento". ¿Cómo varía la relación (lineal) entre "W" (victorias) y "ERA" según qué otras covariables se incluyan en la especificación?
A continuación se muestra un breve script que aprovecha el poder de `.SD` y que explora esta pregunta:
El coeficiente siempre tiene el signo esperado (los mejores lanzadores tienden a tener más victorias y menos carreras permitidas), pero la magnitud puede variar sustancialmente dependiendo de qué más controlemos.
Uniones condicionales
La sintaxis de `data.table` es hermosa por su simplicidad y robustez. La sintaxis `x[i]` maneja de manera flexible tres enfoques comunes para la creación de subconjuntos: cuando `i` es un vector `lógico`, `x[i]` devolverá aquellas filas de `x` correspondientes a donde `i` es `VERDADERO`; cuando `i` es _otra `data.table`_ (o una `lista`), se realiza una `unión` (derecha) (en la forma simple, utilizando las `key`s de `x` e `i`, de lo contrario, cuando se especifica `on = `, utilizando las coincidencias de esas columnas); y cuando `i` es un carácter, se interpreta como una abreviatura de `x[list(i)]`, es decir, como una unión.
Esto es excelente en general, pero se queda corto cuando deseamos realizar una _unión condicional_, en donde la naturaleza exacta de la relación entre tablas depende de algunas características de las filas en una o más columnas.
Este ejemplo es ciertamente un poco artificial, pero ilustra la idea; véase aquí ([1]{1}, [2]{2}) para más información.
El objetivo es agregar una columna `team_performance` a la tabla `Pitching` que registre el desempeño (rango) del mejor lanzador de cada equipo (medido por la ERA más baja, entre los lanzadores con al menos 6 juegos registrados).
Tenga en cuenta que la sintaxis `x[y]` devuelve valores `nrow(y)` (es decir, es una unión derecha), por lo que `.SD` está a la derecha en `Teams[.SD]` (ya que el RHS de `:=` en este caso requiere valores `nrow(Pitching[rank_in_team == 1])`).
Operaciones agrupadas `.SD`
A menudo, nos gustaría realizar alguna operación en nuestros datos _a nivel de grupo_. Cuando especificamos `by =` (o `keyby = `), el modelo mental de lo que sucede cuando `data.table` procesa `j` es pensar en su `data.table` como si estuviera dividida en muchos sub-`data.table` componentes, cada uno de los cuales corresponde a un único valor de su(s) variable(s) `by`:
![Agrupamiento, ilustrado]{1}
En el caso de la agrupación, `.SD` es de naturaleza múltiple: se refiere a _cada_ una de estas sub-`data.table`s, _una a la vez_ (de manera un poco más precisa, el alcance de `.SD` es una única sub-`data.table`). Esto nos permite expresar de manera concisa una operación que nos gustaría realizar en _cada sub-`data.table`_ antes de que se nos devuelva el resultado reensamblado.
Esto es útil en una variedad de configuraciones, las más comunes de las cuales se presentan aquí:
Subconjunto de grupo
Obtengamos la temporada más reciente de datos de cada equipo en los datos de Lahman. Esto se puede hacer de forma muy sencilla con:
Recuerde que `.SD` es en sí mismo una `data.table`, y que `.N` se refiere al número total de filas en un grupo (es igual a `nrow(.SD)` dentro de cada grupo), por lo que `.SD[.N]` devuelve la _totalidad de `.SD`_ para la fila final asociada con cada `teamID`.
Otra versión común de esto es utilizar `.SD[1L]` para obtener la _primera_ observación para cada grupo, o `.SD[sample(.N, 1L)]` para devolver una fila _aleatoria_ para cada grupo.
Grupo Optima
Supongamos que queremos obtener el _mejor_ año de cada equipo, medido por la cantidad total de carreras anotadas (`R`; podríamos ajustar esto fácilmente para hacer referencia a otras métricas, por supuesto). En lugar de tomar un elemento _fijo_ de cada sub-`data.table`, ahora definimos el índice deseado _dinámicamente_ de la siguiente manera:
Tenga en cuenta que este enfoque, por supuesto, se puede combinar con `.SDcols` para devolver solo partes de `data.table` para cada `.SD` (con la salvedad de que `.SDcols` debe fijarse en los distintos subconjuntos).
_NB_: `.SD[1L]` está optimizado actualmente por [_`GForce`_]{1} ([ver también]{2}), elementos internos de `data.table` que aceleran enormemente las operaciones agrupadas más comunes como `sum` o `mean` - vea `?GForce` para más detalles y esté atento/exprese al soporte para solicitudes de mejoras de características para actualizaciones en este frente: [1]{3}, [2]{4}, [3]{5}, [4]{6}, [5]{7}, [6]{8}
Regresión agrupada
Volviendo a la pregunta anterior sobre la relación entre `ERA` y `W`, supongamos que esperamos que esta relación varíe según el equipo (es decir, hay una pendiente diferente para cada equipo). Podemos volver a ejecutar fácilmente esta regresión para explorar la heterogeneidad en esta relación de la siguiente manera (observando que los errores estándar de este enfoque son generalmente incorrectos - la especificación `ERA ~ W*teamID` será mejor - este enfoque es más fácil de leer y los _coeficientes_ son correctos):
Si bien es cierto que existe una buena cantidad de heterogeneidad, hay una clara concentración en torno al valor general observado.
Lo anterior es solo una breve introducción del poder de `.SD` para facilitar un código hermoso y eficiente en `data.table`.
