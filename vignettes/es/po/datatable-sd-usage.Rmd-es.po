#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 11:41-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.13.3\n"

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This vignette will explain the most common ways to use the `.SD` variable in "
"your `data.table` analyses. It is an adaptation of [this answer]{1} given on "
"StackOverflow."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "What is `.SD`?"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"In the broadest sense, `.SD` is just shorthand for capturing a variable that "
"comes up frequently in the context of data analysis. It can be understood to "
"stand for *S*ubset, *S*elfsame, or *S*elf-reference of the *D*ata. That is, `"
".SD` is in its most basic guise a _reflexive reference_ to the `data.table` "
"itself -- as we'll see in examples below, this is particularly helpful for "
"chaining together \"queries\" (extractions/subsets/etc using `[`). In "
"particular, this also means that `.SD` is _itself a `data.table`_ (with the "
"caveat that it does not allow assignment with `:=`)."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"The simpler usage of `.SD` is for column subsetting (i.e., when `.SDcols` is "
"specified); as this version is much more straightforward to understand, "
"we'll cover that first below. The interpretation of `.SD` in its second "
"usage, grouping scenarios (i.e., when `by = ` or `keyby = ` is specified), "
"is slightly different, conceptually (though at core it's the same, since, "
"after all, a non-grouped operation is an edge case of grouping with just one "
"group)."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Loading and Previewing Lahman Data"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"To give this a more real-world feel, rather than making up data, let's load "
"some data sets about baseball from the [Lahman database]{1}. In typical R "
"usage, we'd simply load these data sets from the `Lahman` R package; in this "
"vignette, we've pre-downloaded them directly from the package's GitHub page "
"instead."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Readers up on baseball lingo should find the tables' contents familiar; "
"`Teams` records some statistics for a given team in a given year, while "
"`Pitching` records statistics for a given pitcher in a given year. Please do "
"check out the [documentation]{1} and explore the data yourself a bit before "
"proceeding to familiarize yourself with their structure."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "`.SD` on Ungrouped Data"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"To illustrate what I mean about the reflexive nature of `.SD`, consider its "
"most banal usage:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"That is, `Pitching[ , .SD]` has simply returned the whole table, i.e., this "
"was an overly verbose way of writing `Pitching` or `Pitching[]`:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"In terms of subsetting, `.SD` is still a subset of the data, it's just a "
"trivial one (the set itself)."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Column Subsetting: `.SDcols`"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"The first way to impact what `.SD` is is to limit the _columns_ contained in "
"`.SD` using the `.SDcols` argument to `[`:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This is just for illustration and was pretty boring. In addition to "
"accepting a character vector, `.SDcols` also accepts:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"=====1. any function such as `is.character` to filter _columns_===== =====2. "
"the function^{*} `patterns()` to filter _column names_ by regular "
"expression===== =====3. integer and logical vectors====="
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid "*see `?patterns` for more details"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This simple usage lends itself to a wide variety of highly beneficial / "
"ubiquitous data manipulation operations:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Column Type Conversion"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Column type conversion is a fact of life for data munging. Though [`fwrite` "
"recently gained the ability to declare the class of each column up front]{1}"
", not all data sets come from `fread` (e.g. in this vignette) and "
"conversions back and forth among `character`/`factor`/`numeric` types are "
"common. We can use `.SD` and `.SDcols` to batch-convert groups of columns to "
"a common type."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"We notice that the following columns are stored as `character` in the `Teams`"
" data set, but might more logically be stored as `factor`s:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid "The syntax to now convert these columns to `factor` is simple:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid "Note:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"=====1. The `:=` is an assignment operator to update the `data.table` in "
"place without making a copy. See [reference semantics]{1} for more. ===== "
"=====2. The LHS, `names(.SD)`, indicates which columns we are updating - in "
"this case we update the entire `.SD`.===== =====3. The RHS, `lapply()`, "
"loops through each column of the `.SD` and converts the column to a "
"factor.===== =====4. We use the `.SDcols` to only select columns that have "
"pattern of `teamID`.====="
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Again, the `.SDcols` argument is quite flexible; above, we supplied "
"`patterns` but we could have also supplied `fkt` or any `character` vector "
"of column names. In other situations, it is more convenient to supply an "
"`integer` vector of column _positions_ or a `logical` vector dictating "
"include/exclude for each column. Finally, the use of a function to filter "
"columns is very helpful."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"For example, we could do the following to convert all `factor` columns to "
"`character`:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Lastly, we can do pattern-based matching of columns in `.SDcols` to select "
"all columns which contain `team` back to `factor`:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"** A proviso to the above: _explicitly_ using column numbers (like `DT[ , (1)"
" := rnorm(.N)]`) is bad practice and can lead to silently corrupted code "
"over time if column positions change. Even implicitly using numbers can be "
"dangerous if we don't keep smart/strict control over the ordering of when we "
"create the numbered index and when we use it."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Controlling a Model's Right-Hand Side"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Varying model specification is a core feature of robust statistical "
"analysis. Let's try and predict a pitcher's ERA (Earned Runs Average, a "
"measure of performance) using the small set of covariates available in the "
"`Pitching` table. How does the (linear) relationship between `W` (wins) and "
"`ERA` vary depending on which other covariates are included in the "
"specification?"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Here's a short script leveraging the power of `.SD` which explores this "
"question:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"The coefficient always has the expected sign (better pitchers tend to have "
"more wins and fewer runs allowed), but the magnitude can vary substantially "
"depending on what else we control for."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Conditional Joins"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"`data.table` syntax is beautiful for its simplicity and robustness. The "
"syntax `x[i]` flexibly handles three common approaches to subsetting -- when "
"`i` is a `logical` vector, `x[i]` will return those rows of `x` "
"corresponding to where `i` is `TRUE`; when `i` is _another `data.table`_ (or "
"a `list`), a (right) `join` is performed (in the plain form, using the `key`"
"s of `x` and `i`, otherwise, when `on = ` is specified, using matches of "
"those columns); and when `i` is a character, it is interpreted as shorthand "
"for `x[list(i)]`, i.e., as a join."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This is great in general, but falls short when we wish to perform a "
"_conditional join_, wherein the exact nature of the relationship among "
"tables depends on some characteristics of the rows in one or more columns."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This example is admittedly a tad contrived, but illustrates the idea; see "
"here ([1]{1}, [2]{2}) for more."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"The goal is to add a column `team_performance` to the `Pitching` table that "
"records the team's performance (rank) of the best pitcher on each team (as "
"measured by the lowest ERA, among pitchers with at least 6 recorded games)."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Note that the `x[y]` syntax returns `nrow(y)` values (i.e., it's a right "
"join), which is why `.SD` is on the right in `Teams[.SD]` (since the RHS of "
"`:=` in this case requires `nrow(Pitching[rank_in_team == 1])` values)."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Grouped `.SD` operations"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Often, we'd like to perform some operation on our data _at the group level_. "
"When we specify `by =` (or `keyby = `), the mental model for what happens "
"when `data.table` processes `j` is to think of your `data.table` as being "
"split into many component sub-`data.table`s, each of which corresponds to a "
"single value of your `by` variable(s):"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid "![Grouping, Illustrated]{1}"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"In the case of grouping, `.SD` is multiple in nature -- it refers to _each_ "
"of these sub-`data.table`s, _one-at-a-time_ (slightly more accurately, the "
"scope of `.SD` is a single sub-`data.table`). This allows us to concisely "
"express an operation that we'd like to perform on _each sub-`data.table`_ "
"before the re-assembled result is returned to us."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"This is useful in a variety of settings, the most common of which are "
"presented here:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Group Subsetting"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Let's get the most recent season of data for each team in the Lahman data. "
"This can be done quite simply with:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Recall that `.SD` is itself a `data.table`, and that `.N` refers to the "
"total number of rows in a group (it's equal to `nrow(.SD)` within each group)"
", so `.SD[.N]` returns the _entirety of `.SD`_ for the final row associated "
"with each `teamID`."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Another common version of this is to use `.SD[1L]` instead to get the "
"_first_ observation for each group, or `.SD[sample(.N, 1L)]` to return a "
"_random_ row for each group."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Group Optima"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Suppose we wanted to return the _best_ year for each team, as measured by "
"their total number of runs scored (`R`; we could easily adjust this to refer "
"to other metrics, of course). Instead of taking a _fixed_ element from each "
"sub-`data.table`, we now define the desired index _dynamically_ as follows:"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Note that this approach can of course be combined with `.SDcols` to return "
"only portions of the `data.table` for each `.SD` (with the caveat that `."
"SDcols` should be fixed across the various subsets)"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"_NB_: `.SD[1L]` is currently optimized by [_`GForce`_]{1} ([see also]{2}), "
"`data.table` internals which massively speed up the most common grouped "
"operations like `sum` or `mean` -- see `?GForce` for more details and keep "
"an eye on/voice support for feature improvement requests for updates on this "
"front: [1]{3}, [2]{4}, [3]{5}, [4]{6}, [5]{7}, [6]{8}"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bheading
msgid "Grouped Regression"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"Returning to the inquiry above regarding the relationship between `ERA` and "
"`W`, suppose we expect this relationship to differ by team (i.e., there's a "
"different slope for each team). We can easily re-run this regression to "
"explore the heterogeneity in this relationship as follows (noting that the "
"standard errors from this approach are generally incorrect -- the "
"specification `ERA ~ W*teamID` will be better -- this approach is easier to "
"read and the _coefficients_ are OK):"
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"While there is indeed a fair amount of heterogeneity, there's a distinct "
"concentration around the observed overall value."
msgstr ""

#: es%5Cdatatable-sd-usage.Rmd.tmp%2Bp
msgid ""
"The above is just a short introduction of the power of `.SD` in facilitating "
"beautiful, efficient code in `data.table`!"
msgstr ""

