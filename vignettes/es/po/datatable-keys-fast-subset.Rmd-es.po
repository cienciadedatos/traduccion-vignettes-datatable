#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 11:40-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.13.3\n"

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"This vignette is aimed at those who are already familiar with *data.table* "
"syntax, its general form, how to subset rows in `i`, select and compute on "
"columns, add/modify/delete columns *by reference* in `j` and group by using "
"`by`. If you're not familiar with these concepts, please read the *"
"\"Introduction to data.table\"* and *\"Reference semantics\"* vignettes "
"first."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Data {#data}"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We will use the same `flights` data as in the *\"Introduction to data.table\""
"* vignette."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Introduction"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "In this vignette, we will"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* first introduce the concept of `key` in *data.table*, and set and use "
"keys to perform *fast binary search* based subsets in `i`,====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* see that we can combine key based subsets along with `j` and `by` in "
"the exact same way as before,====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* look at other additional useful arguments - `mult` and `nomatch`,====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* and finally conclude by looking at the advantage of setting keys - "
"perform *fast binary search based subsets* and compare with the traditional "
"vector scan approach.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "1. Keys"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "a) What is a *key*?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"In the *\"Introduction to data.table\"* vignette, we saw how to subset rows "
"in `i` using logical expressions, row numbers and using `order()`. In this "
"section, we will look at another way of subsetting incredibly fast - using "
"*keys*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"But first, let's start by looking at *data.frames*. All *data.frames* have a "
"row names attribute. Consider the *data.frame* `DF` below."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "We can *subset* a particular row using its row name as shown below:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"i.e., row names are more or less *an index* to rows of a *data.frame*. "
"However,"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====1. Each row is limited to *exactly one* row name.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====2. And row names should be *unique*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "Now let's convert it to a *data.table*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* Note that row names have been reset.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* *data.tables* never uses row names. Since *data.tables* **inherit** "
"from *data.frames*, it still has the row names attribute. But it never uses "
"them. We'll see in a moment as to why.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Instead, in *data.tables* we set and use `keys`. Think of a `key` as **"
"supercharged rownames**."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Keys and their properties {#key-properties}"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====1. We can set keys on *multiple columns* and the column can be of *"
"different types* -- *integer*, *numeric*, *character*, *factor*, *integer64* "
"etc. *list* and *complex* types are not supported yet.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====2. Uniqueness is not enforced, i.e., duplicate key values are allowed. "
"Since rows are sorted by key, any duplicates in the key columns will appear "
"consecutively.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====3. Setting a `key` does *two* things:====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "For the rest of the vignette, we will work with `flights` data set."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "b) Set, get and use keys on a *data.table*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- How can we set the column `origin` as key in the *data.table* `flights`?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* You can use the function `setkey()` and provide the column names ("
"without quoting them). This is helpful during interactive use.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Alternatively you can pass a character vector of column names to the "
"function `setkeyv()`. This is particularly useful while designing functions "
"to pass columns to set key on as function arguments.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Note that we did not have to assign the result back to a variable. "
"This is because like the `:=` function we saw in the *\"Reference semantics\""
"* vignette, `setkey()` and `setkeyv()` modify the input *data.table* *by "
"reference*. They return the result invisibly.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The *data.table* is now reordered (or sorted) by the column we "
"provided - `origin`. Since we reorder by reference, we only require "
"additional memory of one column of length equal to the number of rows in the "
"*data.table*, and is therefore very memory efficient.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* You can also set keys directly when creating *data.tables* using the "
"`data.table()` function using `key` argument. It takes a character vector of "
"column names.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "set* and `:=`:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"In *data.table*, the `:=` operator and all the `set*` (e.g., `setkey`, "
"`setorder`, `setnames` etc.) functions are the only ones which modify the "
"input object *by reference*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Once you *key* a *data.table* by certain columns, you can subset by querying "
"those key columns using the `.()` notation in `i`. Recall that `.()` is an *"
"alias to* `list()`."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Use the key column `origin` to subset all rows where the origin airport "
"matches *\"JFK\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The *key* column has already been set to `origin`. So it is "
"sufficient to provide the value, here *\"JFK\"*, directly. The `.()` syntax "
"helps identify that the task requires looking up the value *\"JFK\"* in the "
"key column of *data.table* (here column `origin` of `flights` *data."
"table*).====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The *row indices* corresponding to the value *\"JFK\"* in `origin` is "
"obtained first. And since there is no expression in `j`, all columns "
"corresponding to those row indices are returned.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* On single column key of *character* type, you can drop the `.()` "
"notation and use the values directly when subsetting, like subset using row "
"names on *data.frames*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* We can subset any amount of values as required====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "-- How can we get the column(s) a *data.table* is keyed by?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "Using the function `key()`."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* It returns a character vector of all the key columns.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* If no key is set, it returns `NULL`.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "c) Keys and multiple columns"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"To refresh, *keys* are like *supercharged* row names. We can set key on "
"multiple columns and they can be of multiple types."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "-- How can I set keys on both `origin` *and* `dest` columns?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* It sorts the *data.table* first by the column `origin` and then by "
"`dest` *by reference*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Subset all rows using key columns where first key column `origin` matches "
"*\"JFK\"* and second key column `dest` matches *\"MIA\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "How does the subset work here? {#multiple-key-point}"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* It is important to understand how this works internally. *\"JFK\"* is "
"first matched against the first key column `origin`. And *within those "
"matching rows*, *\"MIA\"* is matched against the second key column `dest` to "
"obtain *row indices* where both `origin` and `dest` match the given "
"values.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Since no `j` is provided, we simply return *all columns* "
"corresponding to those row indices.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Subset all rows where just the first key column `origin` matches *\"JFK\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Since we did not provide any values for the second key column `dest`, "
"it just matches *\"JFK\"* against the first key column `origin` and returns "
"all the matched rows.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Subset all rows where just the second key column `dest` matches *\"MIA\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "What's happening here?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Read [this]{1} again. The value provided for the second key column *"
"\"MIA\"* has to find the matching values in `dest` key column *on the "
"matching rows provided by the first key column `origin`*. We can not skip "
"the values of key columns *before*. Therefore, we provide *all* unique "
"values from key column `origin`.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* *\"MIA\"* is automatically recycled to fit the length of "
"`unique(origin)` which is *3*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "2. Combining keys with `j` and `by`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"All we have seen so far is the same concept -- obtaining *row indices* in `i`"
", but just using a different method -- using `keys`. It shouldn't be "
"surprising that we can do exactly the same things in `j` and `by` as seen "
"from the previous vignettes. We will highlight this with a few examples."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "a) Select in `j`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Return `arr_delay` column as a *data.table* corresponding to `origin = "
"\"LGA\"` and `dest = \"TPA\"`."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The *row indices* corresponding to `origin == \"LGA\"` and `dest == "
"\"TPA\"` are obtained using *key based subset*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Once we have the row indices, we look at `j` which requires only the "
"`arr_delay` column. So we simply select the column `arr_delay` for those *"
"row indices* in the exact same way as we have seen in *Introduction to data."
"table* vignette.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* We could have returned the result by using `with = FALSE` as "
"well.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "b) Chaining"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- On the result obtained above, use chaining to order the column in "
"decreasing order."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "c) Compute or *do* in `j`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Find the maximum arrival delay corresponding to `origin = \"LGA\"` and `"
"dest = \"TPA\"`."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* We can verify that the result is identical to first value (486) from "
"the previous example.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "d) *sub-assign* by reference using `:=` in `j`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We have seen this example already in the *Reference semantics* vignette. "
"Let's take a look at all the `hours` available in the `flights` *data.table*:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We see that there are totally `25` unique values in the data. Both *0* and "
"*24* hours seem to be present. Let's go ahead and replace *24* with *0*, but "
"this time using *key*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* We first set `key` to `hour`. This reorders `flights` by the column "
"`hour` and marks that column as the `key` column.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Now we can subset on `hour` by using the `.()` notation. We subset "
"for the value *24* and obtain the corresponding *row indices*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* And on those row indices, we replace the `key` column with the value "
"`0`.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Since we have replaced values on the *key* column, the *data.table* "
"`flights` isn't sorted by `hour` anymore. Therefore, the key has been "
"automatically removed by setting to NULL.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "Now, there shouldn't be any *24* in the `hour` column."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "e) Aggregation using `by`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "Let's set the key back to `origin, dest` first."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Get the maximum departure delay for each `month` corresponding to `origin "
"= \"JFK\"`. Order the result by `month`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* We subset on the `key` column *origin* to obtain the *row indices* "
"corresponding to *\"JFK\"*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Once we obtain the row indices, we only need two columns - `month` to "
"group by and `dep_delay` to obtain `max()` for each group. *data.table's* "
"query optimisation therefore subsets just those two columns corresponding to "
"the *row indices* obtained in `i`, for speed and memory efficiency.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* And on that subset, we group by *month* and compute "
"`max(dep_delay)`.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* We use `keyby` to automatically key that result by *month*. Now we "
"understand what that means. In addition to ordering, it also sets *month* as "
"the `key` column.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "3. Additional arguments - `mult` and `nomatch`"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "a) The *mult* argument"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We can choose, for each query, if *\"all\"* the matching rows should be "
"returned, or just the *\"first\"* or *\"last\"* using the `mult` argument. "
"The default value is *\"all\"* - what we've seen so far."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Subset only the first matching row from all rows where `origin` matches *"
"\"JFK\"* and `dest` matches *\"MIA\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid ""
"-- Subset only the last matching row of all the rows where `origin` matches *"
"\"LGA\", \"JFK\", \"EWR\"* and `dest` matches *\"XNA\"*"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The query *\"JFK\", \"XNA\"* doesn't match any rows in `flights` and "
"therefore returns `NA`.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Once again, the query for second key column `dest`, *\"XNA\"*, is "
"recycled to fit the length of the query for first key column `origin`, which "
"is of length 3.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "b) The *nomatch* argument"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We can choose if queries that do not match should return `NA` or be skipped "
"altogether using the `nomatch` argument."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "-- From the previous example, Subset all rows only if there's a match"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Default value for `nomatch` is `NA`. Setting `nomatch = NULL` skips "
"queries with no matches.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The query “JFK”, “XNA” doesn’t match any rows in flights and "
"therefore is skipped.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "4. binary search vs vector scans"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"We have seen so far how we can set and use keys to subset. But what's the "
"advantage? For example, instead of doing:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "we could have done:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"One advantage very likely is shorter syntax. But even more than that, *"
"binary search based subsets* are **incredibly fast**."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"As the time goes `data.table` gets new optimization and currently the latter "
"call is automatically optimized to use *binary search*.\n"
"To use slow *vector scan* key needs to be removed."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "a) Performance of binary search approach"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"To illustrate, let's create a sample *data.table* with 20 million rows and "
"three columns and key it by columns `x` and `y`."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"`DT` is ~380MB. It is not really huge, but this will do to illustrate the "
"point."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"From what we have seen in the Introduction to data.table section, we can "
"subset those rows where columns `x = \"g\"` and `y = 877` as follows:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "Now let's try to subset by using keys."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* The speed-up is **~`r round(t1[3]/max(t2[3], .001))`x**!====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "b) Why does keying a *data.table* result in blazing fast subsets?"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"To understand that, let's first look at what *vector scan approach* (method "
"1) does."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Vector scan approach"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* The column `x` is searched for the value *\"g\"* row by row, on all "
"20 million of them. This results in a *logical vector* of size 20 million, "
"with values `TRUE, FALSE or NA` corresponding to `x`'s value.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Similarly, the column `y` is searched for `877` on all 20 million "
"rows one by one, and stored in another logical vector.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Element wise `&` operations are performed on the intermediate logical "
"vectors and all the rows where the expression evaluates to `TRUE` are "
"returned.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"This is what we call a *vector scan approach*. And this is quite "
"inefficient, especially on larger tables and when one needs repeated "
"subsetting, because it has to scan through all the rows each time."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Now let us look at binary search approach (method 2). Recall from ["
"Properties of key]{1} - *setting keys reorders the data.table by key columns*"
". Since the data is sorted, we don't have to *scan through the entire length "
"of the column*! We can instead use *binary search* to search a value in `O("
"log n)` as opposed to `O(n)` in case of *vector scan approach*, where `n` is "
"the number of rows in the *data.table*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Binary search approach"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Here's a very simple illustration. Let's consider the (sorted) numbers shown "
"below:"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Suppose we'd like to find the matching position of the value *1*, using "
"binary search, this is how we would proceed - because we know that the data "
"is *sorted*."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* Start with the middle value = 19. Is 1 == 19? No. 1 < 19.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Since the value we're looking for is smaller than 19, it should be "
"somewhere before 19. So we can discard the rest of the half that are >= "
"19.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Our set is now reduced to *1, 5, 10*. Grab the middle value once "
"again = 5. Is 1 == 5? No. 1 < 5.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* Our set is reduced to *1*. Is 1 == 1? Yes. The corresponding index is "
"also 1. And that's the only match.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"A vector scan approach on the other hand would have to scan through all the "
"values (here, 7)."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"It can be seen that with every search we reduce the number of searches by "
"half. This is why *binary search* based subsets are **incredibly fast**. "
"Since rows of each column of *data.tables* have contiguous locations in "
"memory, the operations are performed in a very cache efficient manner (also "
"contributes to *speed*)."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"In addition, since we obtain the matching row indices directly without "
"having to create those huge logical vectors (equal to the number of rows in "
"a *data.table*), it is quite **memory efficient** as well."
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bheading
msgid "Summary"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"In this vignette, we have learnt another method to subset rows in `i` by "
"keying a *data.table*. Setting keys allows us to perform blazing fast "
"subsets by using *binary search*. In particular, we have seen how to"
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid "=====* set key and subset using the key on a *data.table*.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* subset using keys which fetches *row indices* in `i`, but much "
"faster.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"=====* combine key based subsets with `j` and `by`. Note that the `j` and "
"`by` operations are exactly the same as before.====="
msgstr ""

#: es%5Cdatatable-keys-fast-subset.Rmd.tmp%2Bp
msgid ""
"Key based subsets are **incredibly fast** and are particularly useful when "
"the task involves *repeated subsetting*. But it may not be always desirable "
"to set key and physically reorder the *data.table*. In the next vignette, we "
"will address this using a *new* feature -- *secondary indexes*."
msgstr ""

